# CoCalc Examples Documentation File
# Copyright: CoCalc Authors, 2018
# This is derived content from the BSD licensed https://github.com/moble/jupyter_boilerplate/

# # # # # # # # # # # # # # # # # # # # # # # # # # #
# THIS FILE IS AUTOGENERATED -- DO NOT EDIT BY HAND #
# # # # # # # # # # # # # # # # # # # # # # # # # # #

---
language: python
---
category: ['Regular Expressions', 'Escaped special characters']
setup: "import re"
---
title: |
  .
code: |
  \.
---
title: |
  ^
code: |
  \^
---
title: |
  $
code: |
  \$
---
title: |
  *
code: |
  \*
---
title: |
  +
code: |
  \+
---
title: |
  ?
code: |
  \?
---
title: |
  {
code: |
  \{
---
title: |
  }
code: |
  \}
---
title: |
  [
code: |
  \[
---
title: |
  ]
code: |
  \]
---
title: |
  \
code: |
  \\
---
title: |
  |
code: |
  \|
---
title: |
  (
code: |
  \(
---
title: |
  )
code: |
  \)
---
category: ['Regular Expressions', 'Character classes and alternatives']
setup: "import re"
---
category: ['Regular Expressions', 'Character classes and alternatives / Standard character-class abbreviations']
setup: "import re"
---
title: |
  Any decimal digit
code: |
  \d
---
title: |
  Any non-digit character
code: |
  \D
---
title: |
  Any whitespace character
code: |
  \s
---
title: |
  Any non-whitespace character
code: |
  \S
---
title: |
  Any alphanumeric character
code: |
  \w
---
title: |
  Any non-alphanumeric character
code: |
  \W
---
title: |
  Inclusive character classes
code: |
  [a-zA-Z0-9 \t\n\r\f\v]
---
title: |
  Exclusive character classes
code: |
  [^a-zA-Z0-9]
---
title: |
  Alternatives
code: |
  (?:abc|def)
---
category: ['Regular Expressions', 'Repetition']
setup: "import re"
---
title: |
  Match 0 or more repetitions of the preceding, greedily
code: |
  *
---
title: |
  Match 1 or more repetitions of the preceding, greedily
code: |
  +
---
title: |
  Match 0 or 1 repetitions of the preceding, greedily
code: |
  ?
---
title: |
  Match 0 or more repetitions of the preceding, non-greedily
code: |
  *?
---
title: |
  Match 1 or more repetitions of the preceding, non-greedily
code: |
  +?
---
title: |
  Match 0 or 1 repetitions of the preceding, non-greedily
code: |
  ??
---
title: |
  Match exactly n repeititions of the preceding
code: |
  {3}
---
title: |
  Match between m and n repetions of the preceding, greedily
code: |
  {3,5}
---
title: |
  Match between m and n repetions of the preceding, non-greedily
code: |
  {3,5}?
---
category: ['Regular Expressions', 'Lookahead/behind']
setup: "import re"
---
title: |
  Positive lookahead
code: |
  string = "Isaac Asimov"
  pattern = re.compile(r"Isaac(?= Asimov)")  # Only match "Isaac Asimov", but drop the " Asimov"
  result = re.match(pattern, string)
  if result is not None:
      print("Substring '{0}' was found in the range {1}".format(result.group(), result.span()))
---
title: |
  Negative lookahead
code: |
  string = "Isaac Newton"
  pattern = re.compile(r"Isaac(?! Asimov)")  # Match any Isaac except Asimov, and only keep the "Isaac"
  result = re.match(pattern, string)
  if result is not None:
      print("Substring '{0}' was found in the range {1}".format(result.group(), result.span()))
---
title: |
  Positive lookbehind
code: |
  string = "Janet Asimov"
  pattern = re.compile(r"(?<=Janet )Asimov")  # Only match "Janet Asimov", but drop the "Janet "
  result = re.search(pattern, string)
  if result is not None:
      print("Substring '{0}' was found in the range {1}".format(result.group(), result.span()))
---
title: |
  Negative lookbehind
code: |
  string = "Janet Asimov"
  pattern = re.compile(r"(?<!Isaac )Asimov")  # Will match any Asimov except Isaac, and only keep "Asimov"
  result = re.search(pattern, string)
  if result is not None:
      print("Substring '{0}' was found in the range {1}".format(result.group(), result.span()))
---
category: ['Regular Expressions', 'Compilation flags']
setup: "import re"
---
title: |
  Enable verbose REs, for cleaner and more organized code
code: |
  re.VERBOSE
---
title: |
  Do case-insensitive matches
code: |
  re.IGNORECASE
---
title: |
  Make "." match any character, including newlines
code: |
  re.DOTALL
---
title: |
  Multi-line matching, affecting "^" and "$"
code: |
  re.MULTILINE
---
title: |
  Make \w, \W, \b, \B, \s, and \S Unicode aware
code: |
  re.UNICODE
---
title: |
  Make \w, \W, \b, \B, \s, and \S dependent on the current locale
code: |
  re.LOCALE
---
title: |
  Display debug info about compiled regex
code: |
  re.DEBUG