# CoCalc Examples Documentation File
# Copyright: CoCalc Authors, 2017
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)

language: r
---
category: ["Introduction", "Language 101"]
sortweight: -1
---
title: Expressions
descr: |
  Working with an R session allows you to interactively explore data and extract information from it.
  Here, we start with a simple calculation:

  Experiment with that expression, what result gives `1 / (3-7)`?
code: 2+3
---
title: Strings
descr: |
  "Strings" are sequences of characters.
  They're enclosed in `"..."` characters.
code: |
  print("abc")
---
title: Vectors
descr: |
  A lot in R is done via functions.
  They are called by their name and arguments come in brackets.

  Here for example, the function `c` creates a vector $[1,2,3,2,6,1]$:
code: c(1,2,3,2,6,1)
---
title: Variables
descr: |
  Variables are used to give any objects (input, output, results, ...) a name.
  That way, they can be refered later.

  For example, we first store a vector in the variable `x`, and then compute a statistical summary information about it and its length.

  Note, that we use `<-` to assign a variable and use `print(...)` to write output.
code: |
  x <- c(2,3,5,6,7.7,8,9,7,5,7,5,3)
  print(summary(x))
  print(length(x))
---
title: Basic Data Types
descr: |
  R knows a few basic data types. Use `class(...)` to see the associated type information.

  * Numeric: decimal values
  * Integer: integer values
  * Complex
  * Logical
  * Character
code: |
  print(class(1.1))     # numeric
  print(class(42))      # integer
  print(class(2 + 3i))  # complex
  print(class(TRUE))    # logical
  print(class("abc"))   # character
---
category: ["Introduction", "Data Structures"]
sortweight: 1
---
title: Vector
descr: |
  Vectors are created via the `c(...)` function.

  You can also use `c` to combine more than one vector.
code: |
  print(c(TRUE, TRUE, FALSE))
  a <- c(1,2,3)
  b <- c(9, 4.4, 1.1)
  print(c(a, b))
---
title: Vector Arithmetic
descr: Numerical vectors can be used in calculations.
code: |
  a <- c(1, 2.0, 3.0)
  b <- c(9, 4.4, 1.1)
  print(2 * a)     # multiplication with a scalar
  print(a + b)
  print(a - b)
  print(a %*% b)   # dot-product
---
title: Indexing a Vector
descr: An element of a vector can be accessed via indexing. Indexing starts at `1`!
code: |
  v <- c(7, 2, 3)
  v[1]
---
title: Named Vector Members
descr: |
  In an other example, `table` created a named vector.
  We can access the members via `[...]` notation.

  To set a value, you can do this: `<named vector>["<name>"] <- <value>`.
code: |
  t <- table(c("A", "B", "B", "A", "B"))
  print(t["A"])
  print("Now, we set 'C' to 99")
  t["C"] <- 99
  print(t)
---
title: Matrix
descr: |
  A matrix is a two-dimensional grid of values.
  It has a certain number of rows and columns.
  In this example, we create a matrix

  $$A = \begin{bmatrix}1 & 3 & 5\\2.2 & -9 & 0.1\end{bmatrix}$$

  Elements are accessed via `A[1,2]`.
code: |
  A = matrix(c(1, 3, 5, 2.2, -9, 0.1),  nrow=2)
  print(A)
  print(A[1,2])
---
title: Lists
descr: |
  A list is more general than a vector. It can contain any type of object.
  Elements are accessed via double-brackets.
code: |
  l <- list(c(1,2,3), "abc", TRUE)
  print(l)
  print(l[[2]])
---
title: Named List Entries
descr: |
  List elements can also have names.
  This is convenient to enrich the data with semantic information.
  The entries are accessed via the `$` operator.
code: |
  nl <- list(order = c(1,2,3), size = c(5, 6, 2.2))
  print(nl)
  print(nl$size)
---
title: Dataframes
descr: |
  Dataframes are more complex datastructures, which made R famous for what it is.
  They are similar to named list entries, but all vectors (columns) have the same length.
  For example, these can be measurement results of experiments, where each row stands for an individual outcome.

  Accessing columns is done via `$`, e.g. `table(people$sex)` tabulates the distribution of male vs. female people.
code: |
  name <- c('tim', 'luise', 'robert', 'frank')
  sex <- c('M', 'F', 'M', 'M')
  age <- c(19, 44, 18, 24)
  people <- data.frame(name, sex, age)
  people
---
category: ["Introduction", "Help"]
---
title: How to get help
descr: |
  Run `help(...)` for a function to pull out the associated documentation.
code: |
  help(summary)
---
title: Further Links
descr: |
  * http://www.r-tutor.com/
code: |
  "http://www.r-tutor.com/"
---
category: ["Introduction", "Programming"]
sortweight: 2
---
title: Functions
descr: |
  This is how functions are defined. Try different arguments for `f1(...)` to follow it's inner workings.
code: |
  f1 <- function(x, y) {
      z = 1 + x;
      return(x + y + z);
  }
  f1(2, 3)
---
title: Iterations
descr: |
  Here, we iterate over all values in a vector.
  In each iteration, the value of the current element `i` is added to `r` and saved again in `r`.
  Therefore, `r` is the sum.

  Check the result via the much more efficient `sum(a)` function.
code: |
  a <- c(8, 9, 10.1, 11)
  r <- 0
  for (i in a) {
      r <- r + i;
  }
  print(r)