# CoCalc Examples Documentation File
# Copyright: SageMath Inc., 2016
# License:   Creative Commons: Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)
---
language: sage
category: Mathematics / Linear Algebra
---
title: Vector
descr: |
  Sage is able to build vectors of elements in a ring.
  When no ring is specified, it deduces it from the given elements.

  Look at the different parents of $v_1$ and $v_2$.
code: |
  v1 = vector([1,2,3])
  print(v1)
  print(v1.parent())
  v2 = vector([-1.1, 2.2, 3])
  print(v2)
  print(v2.parent())
---
title: Matrix
descr: |
  Sage is able to build matrices of elements in a ring.
  Similar to vectors, the ring is deduced from the elements.

  In this case here, we explicitly tell Sage that the ring is `RDF`, though.
code: |
  m1 = matrix([[1, 2], [4, -1]])
  print(m1)
  print(m1.parent())
  m2 = matrix(RDF, [[1, 2], [4, -1]])
  print(m2)
  print(m2.parent())
---
title: Inverse of a Matrix
descr: |
  You can either all the method `.inverse()` or use the `~` operator.

  Note, that the inverse depends on the ring!
code: |
  m1 = matrix([[1, 2], [4, -1]])
  print(m1.inverse())
  m2 = matrix(RDF, [[1, 2], [4, -1]])
  print(~m2)
---
title: Kernel
code: |
  A = matrix(RDF, [[1, -2, 2],
                   [4, -1, 1],
                   [1, -1, 1]])
  kernel(A)
---
title: Solve a Linear System
descr: You can solve a linear system either left or right. The backslash `\` is a shortcut.
code: |
  A = matrix(RDF, [[1, -2, 9],
                   [4,  0, 2],
                   [1, -2, 1]])
  b = vector(RDF, [9, 5, -1])
  x = A.solve_right(b)
  print("x:         {}".format(x))
  print("check A*x: {}".format(A * x))
  print("bashslash: {}".format(A \ b))
---
title: Eigenvalues and Eigenvectors
descr: |
  This code iterates over the left eigenvalues/eigenvectors of a matrix B.
  The method returns a triple of eigenvalues, vectors and multiplicity.
code: |
  B = matrix([[1, 3, 2],
              [1, 3, 2],
              [1, 3, 6]])
  for ev, evec, mult in B.eigenvectors_left():
      print("Eigenvalue: {} with eigenvector: {} of multiplicity {}".format(ev, evec[0], mult))
---
title: Reduced row Echelon Form
test: '[ 1  0 -1]\n[ 0  1  2]\n[ 0  0  0]'
code: |
  C = matrix([[3, 4, 5],
              [2, 3, 4],
              [1, 2, 3]])
  C.echelon_form()
---
